import { existsSync, promises as fs } from 'fs';
import { join } from 'path';
import { parse } from 'yaml';
import type { View } from '../types';

export abstract class FileLazyMap<Entity> implements View<string, Entity> {
  protected readonly cache = new Map<string, Promise<Entity | undefined>>();

  constructor(
    protected readonly folderPath: string,
    protected readonly createEntity: (id: string, data: unknown) => Entity,
  ) {}

  protected abstract deserialize(data: string): unknown;

  private async _loadFile(id: string): Promise<Entity | undefined> {
    try {
      const filePath = join(this.folderPath, `${id}.yml`);
      const fileContent = await fs.readFile(filePath, 'utf8');
      const data = this.deserialize(parse(fileContent));
      return this.createEntity(id, data);
    } catch (error: any) {
      if (error?.code === 'ENOENT') {
        return undefined;
      }

      throw error;
    }
  }

  async get(id: string): Promise<Entity | undefined> {
    if (!this.cache.has(id)) {
      this.cache.set(id, this._loadFile(id));
    }

    return this.cache.get(id)!;
  }

  async has(id: string): Promise<boolean> {
    const filePath = join(this.folderPath, `${id}.yml`);
    const fileContent = await fs.(filePath, 'utf8');
    return existsSync()
  }

  async size(): Promise<number> {
    const files = await fs.readdir(this.folderPath);
    return files.filter((file) => file.endsWith('.yml')).length;
  }

  async keys(): Promise<string[]> {
    const files = await fs.readdir(this.folderPath);
    return files
      .filter((file) => file.endsWith('.yml'))
      .map((file) => file.slice(0, -4)); // Remove the '.yml' extension
  }

  async values(): Promise<Entity[]> {
    const keys = await this.keys();
    return Promise.all(keys.map((id) => this.get(id))) as Promise<Entity[]>;
  }

  async forEach(
    visitor: (entity: Entity) => void | Promise<void>,
  ): Promise<void> {
    const entities = await this.values();
    for (const entity of entities) {
      await visitor(entity);
    }
  }
}
