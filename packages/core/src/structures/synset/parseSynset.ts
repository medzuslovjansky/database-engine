import { Lemma } from '../lemma';

import {
  isAutogenerated,
  isDebatable,
  stripMetacharacters,
} from './metacharacters';
import { Synset } from './Synset';

export default function parseSynset(rawStr: string): Synset {
  const synset = new Synset({
    autogenerated: isAutogenerated(rawStr),
    debatable: isDebatable(rawStr),
  });

  let str = stripMetacharacters(rawStr).trim();
  if (!str) {
    return synset;
  }

  const annotationsMap = new Map<string, string>();
  if (str.includes('(')) {
    let index = 0;
    str = str.replace(/\((\(*(?:[^()]*|\([^)]*\))*\)*)\)/g, (_0, match) => {
      const key = `ANNOTATION_${index++}`;
      annotationsMap.set(key, match);
      return key;
    });
  }

  const lemmas = smartSplit(str).map((value) => {
    const restoredValue = value.replace(
      /\s*(ANNOTATION_\d+)/g,
      function (_0: unknown, match: string) {
        return annotationsMap.get(match) ?? '';
      },
    );

    return Lemma.parse(restoredValue);
  });

  synset.add(lemmas);
  return synset;
}

function smartSplit(value: string): string[] {
  const hasSemicolon = value.includes(';');
  const separator = hasSemicolon ? ';' : ',';
  return value.split(separator);
}
